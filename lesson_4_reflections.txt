git remote to see remote directories
git remote add "Name" "URL" to create a remote with name "Name" and URL from github
git remote -v for more info
git push "Name" "Branch" -> "Name" is the remote name and "Branch" is the branch you are on
When would you want to use a remote repository rather than keeping all your work local?
A: To share the project with other people
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
A : gives greater leeway to user whenever he/she wants to pull changes.
Forking
copying others repository from github to your github without the need to pull
Describe the differences between forks, clones, and branches. When would you use one instead of another?
A: fork -> cloning other user repository on github to your account on github, clone to achieve this on local systems and branches represent different state of the commits.
git stores local copies of all the remote branches.
git fetch
fast forward merges-> when one commit is the ancestor or is reachable from the other commit, moves the label down the ancestory.
when you can reach the a branch from the other you can fast merge, that is one is reachable from another.
What is the benefit of having a copy of the last known state of the remote stored locally?
A: we can work offline and see what differences have we made as compare to the last copy on the github, so its handy for comparison purposes.
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A: There is some complexity that could be easier I suppose but largely its benificial, makes your work open source anybody can view and suggest edits. 
Git itself being the version control tool, that GitHub is built on.
You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A: Normally when trying a new feature or a feature that will probably be on the master if it works smoothly.

 
